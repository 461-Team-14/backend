# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PackageRegEx(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, reg_ex: str=None):  # noqa: E501
        """PackageRegEx - a model defined in Swagger

        :param reg_ex: The reg_ex of this PackageRegEx.  # noqa: E501
        :type reg_ex: str
        """
        self.swagger_types = {
            'reg_ex': str
        }

        self.attribute_map = {
            'reg_ex': 'RegEx'
        }
        self._reg_ex = reg_ex

    @classmethod
    def from_dict(cls, dikt) -> 'PackageRegEx':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PackageRegEx of this PackageRegEx.  # noqa: E501
        :rtype: PackageRegEx
        """
        return util.deserialize_model(dikt, cls)

    @property
    def reg_ex(self) -> str:
        """Gets the reg_ex of this PackageRegEx.

        A regular expression over package names and READMEs that is used for searching for a package  # noqa: E501

        :return: The reg_ex of this PackageRegEx.
        :rtype: str
        """
        return self._reg_ex

    @reg_ex.setter
    def reg_ex(self, reg_ex: str):
        """Sets the reg_ex of this PackageRegEx.

        A regular expression over package names and READMEs that is used for searching for a package  # noqa: E501

        :param reg_ex: The reg_ex of this PackageRegEx.
        :type reg_ex: str
        """
        if reg_ex is None:
            raise ValueError("Invalid value for `reg_ex`, must not be `None`")  # noqa: E501

        self._reg_ex = reg_ex
